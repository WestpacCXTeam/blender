/***************************************************************************************************************************************************************
 *
 * Funky stuff
 *
 **************************************************************************************************************************************************************/


//--------------------------------------------------------------------------------------------------------------------------------------------------------------
// Dependencies
//--------------------------------------------------------------------------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------------------------------------------------------------------------
// Module
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Blender.funky = (() => {

	return {

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
// Module get method
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
		get: () => {
			Blender.debugging.report(`funky: Getting funky stuff`);

			const POST = Blender.POST;
			let funkies = 0;
			let funkyLog = ``;

			for(let i = Blender.FUNKY.length - 1; i >= 0; i--) {
				if( POST[ Blender.FUNKY[i].var ] === `on` ) {
					funkies++; //how many funky bits have been requested?
				}
			}

			if( funkies > 0 ) {
				for(let i = Blender.FUNKY.length - 1; i >= 0; i--) {

					if( POST[ Blender.FUNKY[i].var ] === `on` ) {
						Blender.debugging.report(`funky: Getting ${Blender.FUNKY[i].name} reference`);

						funkies--; //counting down

						if( funkies === 0 ) { //if this is the last one
							Blender.zip.queuing(`funky`, false);
						}

						const file = Blender.FUNKY[i].file.replace( `[Brand]`, POST[`brand`] ); //brand path

						Blender.zip.addPath( file, Blender.FUNKY[i].zip ); //add file to zip
						funkyLog += ` ${Blender.FUNKY[i].name}`;
					}
				}

				Blender.log.info(`             include LESS: ${funkyLog}`);
			}
			else {
				Blender.zip.queuing(`funky`, false);
				Blender.zip.readyZip();
			}
		},

	}

})();